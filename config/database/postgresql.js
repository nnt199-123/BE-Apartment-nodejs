const { Pool } = require('pg');
const readline = require('readline'); // Import readline for user input
require('dotenv').config();

// Kh·ªüi t·∫°o Pool k·∫øt n·ªëi t·ªõi PostgreSQL
const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    max: 20, // T·ªëi ƒëa 20 k·∫øt n·ªëi (t√πy app scale c·ª° n√†o)
    min: 1, // Gi·ªØ √≠t nh·∫•t 1 connection s·ªëng
    idleTimeoutMillis: 30000, // ƒê√≥ng k·∫øt n·ªëi sau 30s kh√¥ng d√πng
    connectionTimeoutMillis: 5000, // Timeout khi connect DB
});

// Helper log function
const logMessage = (message, isError = false) => {
    const timestamp = new Date().toISOString();
    console[isError ? 'error' : 'log'](`[${timestamp}] ${message}`);
};

// ƒê·ªãnh nghƒ©a c√°c c√¢u l·ªánh SQL ƒë·ªÉ t·∫°o b·∫£ng v√† index
// Th·ª© t·ª± t·∫°o b·∫£ng quan tr·ªçng ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i
const createTableQueries = [
    `CREATE TABLE buildings (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        full_address TEXT NOT NULL,
        short_name VARCHAR(100),
        rooms INTEGER DEFAULT 0,
        owner_id INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    `CREATE TABLE rooms (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price NUMERIC(12, 2) NOT NULL,
        deposit NUMERIC(12, 2) DEFAULT 0,
        size INTEGER,
        max_tenants INTEGER DEFAULT 1,
        building_id INTEGER REFERENCES buildings(id) ON DELETE CASCADE,
        floors INTEGER,
        owner_id INTEGER,
        active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    `CREATE TABLE assets (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        color VARCHAR(100),
        price NUMERIC(12, 2),
        owner_id INTEGER,
        room_id INTEGER REFERENCES rooms(id) ON DELETE SET NULL,
        warranty TEXT,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    `CREATE TABLE fees (
        id SERIAL PRIMARY KEY,
        room_id INTEGER REFERENCES rooms(id) ON DELETE CASCADE,
        cycle_month VARCHAR(7) NOT NULL, -- v√≠ d·ª• '2025-07'
        quantity INTEGER NOT NULL DEFAULT 1,
        unit_price NUMERIC(12, 2) NOT NULL,
        total_price NUMERIC(12, 2) NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    `CREATE TABLE services (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price NUMERIC(12, 2) NOT NULL,
        fee_id INTEGER REFERENCES fees(id) ON DELETE SET NULL,
        building_id INTEGER REFERENCES buildings(id) ON DELETE CASCADE,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    `CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
    );`,
    // C√°c c√¢u l·ªánh t·∫°o index
    `CREATE INDEX idx_rooms_building_id ON rooms(building_id);`,
    `CREATE INDEX idx_assets_room_id ON assets(room_id);`,
    `CREATE INDEX idx_fees_room_id ON fees(room_id);`,
    `CREATE INDEX idx_services_building_id ON services(building_id);`
];

// Th·ª© t·ª± x√≥a b·∫£ng (ng∆∞·ª£c l·∫°i v·ªõi th·ª© t·ª± t·∫°o ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i)
const dropTableQueries = [
    `DROP TABLE IF EXISTS services CASCADE;`,
    `DROP TABLE IF EXISTS fees CASCADE;`,
    `DROP TABLE IF EXISTS assets CASCADE;`,
    `DROP TABLE IF EXISTS rooms CASCADE;`,
    `DROP TABLE IF EXISTS buildings CASCADE;`,
    `DROP TABLE IF EXISTS users CASCADE;`
];

// H√†m ki·ªÉm tra k·∫øt n·ªëi khi kh·ªüi ƒë·ªông
const connectToDatabase = async () => {
    logMessage('üîå ƒêang ki·ªÉm tra k·∫øt n·ªëi t·ªõi PostgreSQL...');
    try {
        await pool.query('SELECT 1'); // test query
        logMessage('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi PostgreSQL.');
        return true;
    } catch (error) {
        logMessage(`‚ùå L·ªói k·∫øt n·ªëi PostgreSQL: ${error.message}`, true);
        return false;
    }
};

// H√†m x√≥a t·∫•t c·∫£ c√°c b·∫£ng
const dropAllTables = async () => {
    logMessage('üóëÔ∏è ƒêang x√≥a c√°c b·∫£ng hi·ªán c√≥...');
    for (const query of dropTableQueries) {
        try {
            await pool.query(query);
            logMessage(`   - ƒê√£ th·ª±c thi: ${query.split(' ')[2]}`); // Log t√™n b·∫£ng ƒë∆∞·ª£c x√≥a
        } catch (error) {
            logMessage(`   - L·ªói khi x√≥a b·∫£ng: ${query.split(' ')[2]} - ${error.message}`, true);
        }
    }
    logMessage('üóëÔ∏è ƒê√£ ho√†n t·∫•t vi·ªác x√≥a c√°c b·∫£ng.');
};

// H√†m t·∫°o t·∫•t c·∫£ c√°c b·∫£ng v√† index
const createAllTables = async () => {
    logMessage('‚ú® ƒêang t·∫°o c√°c b·∫£ng v√† index m·ªõi...');
    for (const query of createTableQueries) {
        try {
            await pool.query(query);
            logMessage(`   - ƒê√£ th·ª±c thi: ${query.substring(0, 50)}...`); // Log m·ªôt ph·∫ßn c√¢u l·ªánh
        } catch (error) {
            logMessage(`   - L·ªói khi t·∫°o b·∫£ng/index: ${query.substring(0, 50)}... - ${error.message}`, true);
            // N·∫øu l·ªói do b·∫£ng ƒë√£ t·ªìn t·∫°i, c√≥ th·ªÉ b·ªè qua n·∫øu l√† ch·∫ø ƒë·ªô "c·∫≠p nh·∫≠t"
            // Tuy nhi√™n, h√†m n√†y ch·ªâ d√πng cho "t·∫°o l·∫°i", n√™n l·ªói l√† kh√¥ng mong mu·ªën
        }
    }
    logMessage('‚ú® ƒê√£ ho√†n t·∫•t vi·ªác t·∫°o c√°c b·∫£ng v√† index.');
};

// H√†m ƒë·∫£m b·∫£o c√°c b·∫£ng t·ªìn t·∫°i (t·∫°o n·∫øu ch∆∞a c√≥)
const ensureTablesExist = async () => {
    logMessage('üîÑ ƒêang ki·ªÉm tra v√† t·∫°o c√°c b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i...');
    for (const query of createTableQueries) {
        try {
            await pool.query(query);
            logMessage(`   - ƒê√£ t·∫°o ho·∫∑c ƒë√£ t·ªìn t·∫°i: ${query.substring(0, 50)}...`);
        } catch (error) {
            // L·ªói ph·ªï bi·∫øn khi b·∫£ng ƒë√£ t·ªìn t·∫°i l√† '42P07' (duplicate_table)
            if (error.code === '42P07') {
                logMessage(`   - B·∫£ng/index ƒë√£ t·ªìn t·∫°i: ${query.substring(0, 50)}... (b·ªè qua)`, false);
            } else {
                logMessage(`   - L·ªói khi ƒë·∫£m b·∫£o b·∫£ng/index: ${query.substring(0, 50)}... - ${error.message}`, true);
            }
        }
    }
    logMessage('üîÑ ƒê√£ ho√†n t·∫•t vi·ªác ki·ªÉm tra v√† ƒë·∫£m b·∫£o c√°c b·∫£ng.');
};

// H√†m h·ªèi ng∆∞·ªùi d√πng mu·ªën l√†m g√¨ v·ªõi b·∫£ng
const promptUserForTableAction = async () => {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    return new Promise(resolve => {
        rl.question(
            'B·∫°n mu·ªën l√†m g√¨ v·ªõi c√°c b·∫£ng c∆° s·ªü d·ªØ li·ªáu? (1: T·∫°o l·∫°i t·∫•t c·∫£, 2: C·∫≠p nh·∫≠t/ƒê·∫£m b·∫£o t·ªìn t·∫°i, Tho√°t: B·∫•t k·ª≥ ph√≠m n√†o kh√°c) -> ',
            async (answer) => {
                rl.close();
                if (answer === '1') {
                    logMessage('B·∫°n ƒë√£ ch·ªçn: T·∫°o l·∫°i t·∫•t c·∫£ c√°c b·∫£ng.');
                    await dropAllTables();
                    await createAllTables();
                    resolve(true);
                } else if (answer === '2') {
                    logMessage('B·∫°n ƒë√£ ch·ªçn: C·∫≠p nh·∫≠t/ƒê·∫£m b·∫£o c√°c b·∫£ng t·ªìn t·∫°i.');
                    await ensureTablesExist();
                    resolve(true);
                } else {
                    logMessage('Kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†o v·ªõi c√°c b·∫£ng. ·ª®ng d·ª•ng s·∫Ω tho√°t.');
                    resolve(false);
                }
            }
        );
    });
};

// T√πy ch·ªçn: Ping m·ªói 60s ƒë·ªÉ gi·ªØ alive n·∫øu server kh√¥ng truy v·∫•n th∆∞·ªùng xuy√™n
setInterval(async () => {
    try {
        await pool.query('SELECT 1');
    } catch (err) {
        logMessage(`‚ö†Ô∏è Ping DB th·∫•t b·∫°i: ${err.message}`, true);
    }
}, 60000); // m·ªói 60 gi√¢y

// Export pool v√† c√°c h√†m qu·∫£n l√Ω schema
module.exports = { pool, connectToDatabase, promptUserForTableAction };
