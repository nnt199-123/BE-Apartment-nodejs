const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
    max: 20,                   // t·ªëi ƒëa 20 k·∫øt n·ªëi (t√πy app scale c·ª° n√†o)
    min: 1,                    // gi·ªØ √≠t nh·∫•t 1 connection s·ªëng
    idleTimeoutMillis: 30000, // ƒë√≥ng k·∫øt n·ªëi sau 30s kh√¥ng d√πng
    connectionTimeoutMillis: 5000, // timeout khi connect DB
});

// Helper log function
const logMessage = (message, isError = false) => {
    const timestamp = new Date().toISOString();
    console[isError ? 'error' : 'log'](`[${timestamp}] ${message}`);
};

// Ki·ªÉm tra k·∫øt n·ªëi khi kh·ªüi ƒë·ªông
const connectToDatabase = async () => {
    logMessage('üîå ƒêang ki·ªÉm tra k·∫øt n·ªëi t·ªõi PostgreSQL...');
    try {
        await pool.query('SELECT 1'); // test query
        logMessage('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi PostgreSQL.');
    } catch (error) {
        logMessage(`‚ùå L·ªói k·∫øt n·ªëi PostgreSQL: ${error.message}`, true);
        process.exit(1); // tho√°t ƒë·ªÉ tr√°nh l·ªói ti·ªÅm ·∫©n sau n√†y
    }
};

// T√πy ch·ªçn: Ping m·ªói 60s ƒë·ªÉ gi·ªØ alive n·∫øu server kh√¥ng truy v·∫•n th∆∞·ªùng xuy√™n
setInterval(async () => {
    try {
        await pool.query('SELECT 1');
    } catch (err) {
        logMessage(`‚ö†Ô∏è Ping DB th·∫•t b·∫°i: ${err.message}`, true);
    }
}, 60000); // m·ªói 60 gi√¢y

module.exports = { pool, connectToDatabase };
